#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'find'

class App
  VERSION = '0.5.0'
  CLOJURE_JAR_DEFAULT = "/usr/local/lib/clojure.jar"
  CLOJURE_MAIN = "clojure.main"  

  def initialize( args )
    @dir = "."
    @ensure_classes = false
    @clojure_jar = CLOJURE_JAR_DEFAULT
    @find = false
    @screen = false
    @screen_name = false
    @rlwrap = true
    @heap = "1G"
    @verbose = false
    @jars = []
    @java_args = []
    @user_init = true
    @startup = false

    requires = []
    evals = []

    opts = OptionParser.new do |opts|
      opts.banner = ["Usage: #{$0} [options] [args]",
                     "",
                     "Construct and run clojure under Java.",
                     "",
                     "By default we just run #{CLOJURE_MAIN} and start a repl",
                     "",
                     "All additional args are passed on the java command line.",
                     "If no additional args are given the default startup",
                     "sequence is used.",
                     "",
                     ""
                     ].join( "\n" )

      opts.on( "--help", "Show this message" ) do
        puts opts
        exit
      end
      opts.on_tail("--version", "Show version") do
        puts VERSION
        exit
      end
      opts.on( "--project dir", "Sets the top project dir of the program.  ",
               "Turns on --find and sets --clojure to false" ) do |x|
        @dir = x
        @find = true
        @clojure_jar = false
      end
      opts.on( "--dir dir", "Sets top dir of the program.  ",
               "Defaults to '.'") do |x|
        @dir = x
      end
      opts.on( "--[no-]ensure-classes", "Ensure the classes dir exists" ) do |x|
        @ensure_classes = x
      end
      opts.on( "--[no-]find", "Walk the dir tree looking for jars, ", 
               "classes, and properties files." ) do |x|
        @find = true
      end
      opts.on( "--clojure JAR", "The location of clojure.jar or false.", 
               "Defaults to #{CLOJURE_JAR_DEFAULT}" ) do |x|
        if x == 'false'
          @clojure_jar = false
        else
          @clojure_jar = x
        end
      end
      opts.on( "--[no-]rlwrap", 
               "Run clojure under rlwrap (default: on)" ) do |x|
        @rlwrap = x
      end
      opts.on( "--[no-]screen", 
               "Run clojure under screen (default: off)" ) do |x|
        @screen = x
      end
      opts.on( "--name SCREEN-NAME", 
               "Set the session name for screen" ) do |x|
        @screen_name = x
      end
      opts.on( "--[no-]verbose", "Print the command run" ) do |x|
        @verbose = x
      end
      opts.on( "--[no-]heap SIZE", "Set maximum Java heap size.",
               "Defaults to #{@heap}") do |x|
        @heap = x
      end
      opts.on( "--jar FILE", "Add FILE to the classpath" ) do |x|
        @jars.push x
      end
      opts.on( "--require PACKAGE",
               "Require this during the default startup" ) do |x|
        requires.push x
      end
      opts.on( "--eval EXPRESSION",
               "Eval this during the default startup" ) do |x|
        evals.push x
      end
      opts.on( "--java-arg ARG",
               "Add ARG to the end of the java options" ) do |x|
        @java_args.push x
      end
      opts.on( "--[no-]user-init",
               "Add ~/.clojure to the class path if",
               "it exists" ) do |x|
        @user_init = x
      end
    end

    begin
      opts.parse!( args )
    rescue
      printf( "%s: %s\n", $0, $! ) 
      printf( "Use --help for more information.\n" ) 
      exit
    end

    if args.empty?
      @startup = standard_startup( requires, evals )
    else
      @startup = args
    end
  end

  def run
    FileUtils.mkdir_p( "#{@dir}/classes" ) if @ensure_classes

    exec_program make_classpath
  end

  def standard_startup( requires, evals )
    start = [ CLOJURE_MAIN ]
    requires.each do |r|
      start += ["--eval", "(require '#{r})"]
    end
    evals.each do |e|
      start += ["--eval", e]
    end
    
    start += ["--repl"]
  end

  def exec_program( classpath )
    if ENV["CLASSPATH"]
      ENV["CLASSPATH"] = "#{classpath}:#{ENV["CLASSPATH"]}"
    else
      ENV["CLASSPATH"] = classpath
    end

    cmd  = [ "java", "-server", "-Dclojure.compile.path='#{@dir}/classes'"]
    
    if @heap
      cmd += [ "-Xmx#{@heap}" ]
    end

    cmd += @java_args
    cmd += @startup

    if @rlwrap
      cmd = [find_exe( "rlwrap" )] + cmd
    end

    if @screen
      cmd = ["screen", "-S", make_screen_name, "-d", "-m" ] + cmd
    end

    if @verbose
      puts "ClASSPATH: #{ENV["CLASSPATH"].split( ":" ).inspect}"
      puts "command: #{cmd.inspect}"
    end

    exec *cmd
  end

  def find_exe( name )
    (ENV["PATH"] || "").split( ":" ).each do |d|
      path = File.expand_path name, d
      return path if File.executable? path
    end

    return File.expand_path( name )
  end

  def make_classpath
    entries = []
  
    if @user_init
      d = File.expand_path "~/.clojure"
      entries.push d if File.directory? d
    end

    %w(src properties classes).each do |name|
      subdir = "#{@dir}/#{name}"
      entries.push subdir if File.directory? subdir
    end

    if @find
      real_dir = if File.symlink?( @dir ) then "#{@dir}/" else @dir end
      Find.find( real_dir ) do |name|
        if name.match /\.jar$/ 
          entries.push name
        end
        if name.match %r,^(.*/src)/.*\.clj$, 
          entries.push $1 unless entries.member? $1
        end
        if name.match %r,^(.*/classes)/.*\.class$, 
          entries.push $1 unless entries.member? $1
        end
      end
    end

    entries.push @clojure_jar if @clojure_jar
    entries += @jars

    entries.join ":"
  end

  def make_screen_name
    if @screen_name
      @screen_name
    elsif @dir == "."
      "clojure"
    else
      @dir.gsub( "/", "." )
    end
  end
end

App.new( ARGV ).run
